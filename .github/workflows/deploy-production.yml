# .github/workflows/deploy-production.yml
name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy to production'
        required: true
        type: string

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    environment:
      name: production
      url: https://yourapp.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::640168440704:role/GitHubActionsDeployToECS
          aws-region: us-east-1

      - name: Generate image tag
        id: image-tag
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            TAG=${{ github.event.inputs.tag }}
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Verify image exists in ECR
        run: |
          IMAGE_TAG=${{ steps.image-tag.outputs.tag }}
          aws ecr describe-images \
            --repository-name howard-test \
            --image-ids imageTag=$IMAGE_TAG \
            --region us-east-1 || {
            echo "❌ Image with tag $IMAGE_TAG not found in ECR"
            exit 1
          }

      - name: Update task definition
        run: |
          IMAGE_TAG=${{ steps.image-tag.outputs.tag }}
          sed -i "s|640168440704.dkr.ecr.us-east-1.amazonaws.com/howard-test:.*\"|640168440704.dkr.ecr.us-east-1.amazonaws.com/howard-test:$IMAGE_TAG\"|" environments/production/ecs-task-def.json

      - name: Deploy to ECS Production
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: environments/production/ecs-task-def.json
          service: howard-ecs-service-prod
          cluster: howard-ecs-cluster-prod
          wait-for-service-stability: true

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # 等待服務穩定後進行健康檢查
          sleep 30
          # curl -f https://yourapp.com/health || exit 1

      - name: Create GitHub release
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.image-tag.outputs.tag }}
          release_name: Release ${{ steps.image-tag.outputs.tag }}
          body: |
            ## Changes
            - Production deployment successful
            - Image: 640168440704.dkr.ecr.us-east-1.amazonaws.com/howard-test:${{ steps.image-tag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "🎉 Production deployment successful!"
            echo "🌐 Application is live at https://yourapp.com"
          else
            echo "💥 Production deployment failed!"
          fi
